---
title: "Analysis Walkthrough"
author: "Emma Saaty"
editor: visual
format:
  html:
    self-contained: true
    code-fold: true
    code-tools: true
---

We will be looking at Texas house sale data from the years 2000-2015. The data is categorized by city, and each row has all of the house sales for one month of one year in that city. This data will allow us to filter for certain cities and years, and see how many sales were made, the volume of those sales, the exact dates of the sales, listings, and more.

First we will load the libraries that we need for this analysis.

```{r}
library(tidyverse)
library(lubridate)
```

Run this line of code to load the data for the analysis. This data is house sales in Texas from the years 2000-2015. We will be using the ggplot2 package to look at the data, and I have named the dataset "housesales".

```{r}
housesales <- ggplot2::txhousing

```

Look at the data set and try to think about what analyses could be made based on the data that we have access to here.

```{r}
housesales
```

First I will use the filter () function to return only results from 2015 by putting the house sale data set title followed by a pipe (%\>%) and then filter by the column (year) and equal that column to only 2015.

```{r}

housesales %>%
  filter(year == 2015)
```

I will then use the filter () to return the results from 2010 to 2015 by filtering the column year with a greater than or equal sign (\>=) for 2010. This will give you all of the data from 2010-2015.

```{r}

housesales %>%
  filter(year >= 2010)

```

The "city" column contains the city that each month of house sale data is from. I am using the filter () function to return only results for Houston.

I put in the housesale dataset title followed by a pipe then filtered by the column city with double equals sign (==) for "Houston", which will give me all of the data with Houston as the city.

```{r}

housesales %>%
  filter(city == "Houston")

```

I will then filter () for the city Houston as above, and for only the year 2010. The results gives me 12 records, one for each month in 2010 for Houston.

To do this I put in the housesale dataset title followed by a pipe then filter by the column city with double equals sign for "Houston". I will separate the two different filter commands with a comma and then filter by the column year for 2010.

```{r}

housesales %>%
  filter(city == "Houston" , year == 2010)

```

Next I will build on what I have just done above. I am filtering for only where the city is Houston as above, and the year is 2010. Now I will sort the data using the arrange() function to sort the results based on the number of home sales (the "sales" column) from highest to lowest.

I will put in the housesale dataset title followed by a pipe then filter by the column city with double equals sign for "Houston". I will separate with a comma and then filter by the column year for 2010, followed by a pipe. Finally I will use the arrange command with (desc) in parentheses to arrange by the sales column.

```{r}

housesales %>%
  filter(city == "Houston" , year == 2010) %>%
  arrange(desc(sales))

```

Similarly to what I have done above, we will sort for a different city. I will do the same as before, only this time instead of Houston I will return records for Dallas.

Put in the housesale dataset title followed by a pipe then filter by the column city with double equals sign for "Dallas". Separate with a comma and then filter by the column year for 2010, followed by a pipe. Use the arrange command with (desc) in parentheses to arrange by the sales column.

```{r}


housesales %>%
  filter(city == "Dallas" , year == 2010) %>%
  arrange(desc(sales))

```

Now in order to look for a seasonal quality on the data, I will isolate the same time period across multiple years to compare how it went based on similar times of year. I am going to look only for sales that happened in the month of JUNE.

Filter for the city is Dallas, and the month is June (the number 6). Put in the housesale dataset title followed by a pipe then filter by the column city with double equals sign for "Dallas". Separate with a comma and filter by the column month for "6".

```{r}

housesales %>%
  filter(city == "Dallas" , month == 6)

```

Build on what we've done above. Now that we have June numbers for Dallas for every year, arrange the results by sales from highest-to-lowest to show what year had the highest June sales.

Put in the housesale dataset title followed by a pipe then filter by the column city with double equals sign for "Dallas". Separate with a comma and then filter by the column month for "6", followed by a pipe. Use the arrange command with (desc) in parentheses to arrange by the sales column.

```{r}


housesales %>%
  filter(city == "Dallas" , month == 6) %>%
  arrange(desc(sales))

```

Now do the same as before, but this time instead of Dallas, show results for Corpus Christi.

Put in the housesale dataset title followed by a pipe then filter by the column city with double equals sign for "Corpus Christi". Separate with a comma and then filter by the column month for "6", followed by a pipe. Use the arrange command with (desc) in parentheses to arrange by the sales column.

```{r}


housesales %>%
  filter(city == "Corpus Christi" , month == 6) %>%
  arrange(desc(sales))

```

And that is it! With this walk-through you should have a better understanding of basic filtering and sorting functions, and how these can be used to pull important information from datasets such as these.
